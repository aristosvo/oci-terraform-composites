version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
     FUNCTION_DIRECTORY: "primary_source/createAndTriggerDevOpsBuildAndDeployPipeline/functions/fake-fun"
     SMOKE_TEST_DIRECTORY: "primary_source/createAndTriggerDevOpsBuildAndDeployPipeline/functions/fake-fun/smoke-test"
  # # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  # the imageVersion variable corresponds with a build pipeline parameter. By making this an exported variable and by explicitly setting its value in a build step, we can override the parameter value defined for the build run
  exportedVariables:
    - BUILDRUN_HASH
    - imageVersion


steps:
  - type: Command
    name: "Export variables"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
      echo "FUNCTION-DIRECTORY: " $FUNCTION_DIRECTORY
      echo "imageVersion: " $imageVersion
      echo "compartmentOCID: " $compartmentOCID
      # show all environment variables (to explore how OCI CLI is configured)
      # env
      # oci -version       

    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root
  - type: Command
    name: "N/A (Install Terraform)"
    timeoutInSeconds: 40
    command: |
      wget https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
      unzip *.zip
      mv terraform ~/bin
      terraform -version
      wget https://releases.hashicorp.com/terraform-provider-oci/4.53.0/terraform-provider-oci_4.53.0_linux_amd64.zip
      unzip terraform-provider-oci_4.53.0_linux_amd64.zip
      mv terraform-provider-oci_v4.53.0_x4 ~/bin
      ls -l ~/bin
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400

  - type: Command
    name: "Install jq"
    timeoutInSeconds: 40
    command: |
      yum install epel-release -y
      yum install jq -y
      jq -Version
      
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400

  - type: Command
    timeoutInSeconds: 600
    name: "Perform Smoketest using OCI CLI (call function)"
    command: |
      apps=$(oci fn application list -c $compartmentOCID)
      appId=$(echo $apps | jq --raw-output .data[0].id)
      funs=$(oci fn function list --application-id $appId --display-name "my-new-function")
      funId=$(echo $funs | jq --raw-output .data[0].id)
      echo "Invoking function after Build and Redeployment"
      oci fn function invoke --function-id $funId --file "-"  --body '{"name":"John"}'

      #terraform init
      #terraform apply -auto-approve 
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40

  - type: Command
    timeoutInSeconds: 600
    name: "Perform Smoketest using Terraform"
    command: |
      echo "Apply Terraform Plan"
      oci iam compartment list --all --compartment-id-in-subtree true --access-level ACCESSIBLE --include-root --raw-output --query "data[?contains(\"id\",'tenancy')].id | [0]"
      export TF_VAR_tenancy_ocid=$(oci iam compartment list --all --compartment-id-in-subtree true --access-level ACCESSIBLE --include-root --raw-output --query "data[?contains(\"id\",'tenancy')].id | [0]")
      export TF_VAR_region="us-ashburn-1"
      echo "tenancy ocid" $TF_VAR_tenancy_ocid
      echo "region" $TF_VAR_region
      cd ${OCI_WORKSPACE_DIR}/${SMOKE_TEST_DIRECTORY}
      export TF_VAR_tenancy_ocid=ocid1.tenancy.oc1..aaaaaaaag7c7slwmlvsodyym662ixlsonnihko2igwpjwwe2egmlf3gg6okq
      echo "tenancy ocid" $TF_VAR_tenancy_ocid
      terraform init
      terraform apply -auto-approve 
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
  
        
outputArtifacts:
